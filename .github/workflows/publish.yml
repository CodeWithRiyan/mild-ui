name: Publish
on:
  release:
    types: [created]
  workflow_dispatch:
    inputs:
      dryRun:
        description: "Dry run (no actual publish)"
        type: boolean
        default: false

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - uses: pnpm/action-setup@v2
        with:
          version: 8

      - uses: actions/setup-node@v3
        with:
          node-version: "18"
          registry-url: "https://registry.npmjs.org/"
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install

      - name: Build packages
        run: pnpm build

      - name: Setup npm authentication
        run: echo "//registry.npmjs.org/:_authToken=${NODE_AUTH_TOKEN}" > ~/.npmrc
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Check if packages are already published
        run: |
          # Create an array of packages to publish
          PACKAGES=("core" "react" "vue" "cli")

          # Create a directory to store publish status
          mkdir -p publish_status

          for pkg in "${PACKAGES[@]}"; do
            PKG_NAME=$(node -p "require('./packages/${pkg}/package.json').name")
            PKG_VERSION=$(node -p "require('./packages/${pkg}/package.json').version")
            
            echo "Checking if ${PKG_NAME}@${PKG_VERSION} exists..."
            
            # Try to view the package version without downloading it
            if npm view ${PKG_NAME}@${PKG_VERSION} version &> /dev/null; then
              echo "${PKG_NAME}@${PKG_VERSION} already exists, skipping."
              echo "skip" > publish_status/${pkg}.status
            else
              echo "${PKG_NAME}@${PKG_VERSION} does not exist, will publish."
              echo "publish" > publish_status/${pkg}.status
            fi
          done

      - name: Publish packages
        run: |
          PACKAGES=("core" "react" "vue" "cli")

          for pkg in "${PACKAGES[@]}"; do
            if [[ -f "publish_status/${pkg}.status" && $(cat "publish_status/${pkg}.status") == "publish" ]]; then
              echo "Publishing packages/${pkg}..."
              
              cd packages/${pkg}
              
              if [[ "${{ github.event.inputs.dryRun }}" == "true" ]]; then
                echo "DRY RUN: Would publish $(npm pack --dry-run | tail -1)"
              else
                # Attempt to publish, but continue even if it fails
                npm publish --access public || {
                  ERROR_CODE=$?
                  if [[ $ERROR_CODE -eq 403 ]]; then
                    echo "Warning: Got 403 error when publishing, package may already exist. Continuing..."
                  else
                    echo "Error publishing ${pkg} (exit code: $ERROR_CODE)"
                  fi
                }
              fi
              
              cd ../..
            else
              echo "Skipping packages/${pkg} (already published or flagged to skip)"
            fi
          done
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Summary
        run: |
          echo "## Publication Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Package | Status |" >> $GITHUB_STEP_SUMMARY
          echo "| ------- | ------ |" >> $GITHUB_STEP_SUMMARY

          PACKAGES=("core" "react" "vue" "cli")

          for pkg in "${PACKAGES[@]}"; do
            PKG_NAME=$(node -p "require('./packages/${pkg}/package.json').name")
            PKG_VERSION=$(node -p "require('./packages/${pkg}/package.json').version")
            
            if [[ -f "publish_status/${pkg}.status" && $(cat "publish_status/${pkg}.status") == "publish" ]]; then
              if [[ "${{ github.event.inputs.dryRun }}" == "true" ]]; then
                echo "| ${PKG_NAME}@${PKG_VERSION} | 🔍 Dry run, not published |" >> $GITHUB_STEP_SUMMARY
              else
                echo "| ${PKG_NAME}@${PKG_VERSION} | ✅ Published |" >> $GITHUB_STEP_SUMMARY
              fi
            else
              echo "| ${PKG_NAME}@${PKG_VERSION} | ⏭️ Skipped (already exists) |" >> $GITHUB_STEP_SUMMARY
            fi
          done
