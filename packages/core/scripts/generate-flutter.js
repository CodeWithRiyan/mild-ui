const fs = require("fs").promises;
const path = require("path");

/**
 * Converts mild-ui design tokens to Flutter theme format
 */
async function generateFlutterTheme() {
  try {
    console.log("üé® Generating Flutter theme...");

    // Read design tokens
    const tokensPath = path.join(__dirname, "../dist/tokens.json");
    const tokensData = await fs.readFile(tokensPath, "utf-8");
    const tokens = JSON.parse(tokensData);

    // Create Flutter theme structure
    const flutterTheme = generateFlutterThemeData(tokens);
    
    // Ensure dist directory exists
    await fs.mkdir("dist/flutter", { recursive: true });

    // Write Flutter theme file
    await fs.writeFile("dist/flutter/mild_theme.dart", flutterTheme);
    console.log("‚úÖ Generated Flutter theme: dist/flutter/mild_theme.dart");

    // Generate utility classes for Flutter
    const flutterUtilities = generateFlutterUtilities(tokens);
    await fs.writeFile("dist/flutter/mild_utilities.dart", flutterUtilities);
    console.log("‚úÖ Generated Flutter utilities: dist/flutter/mild_utilities.dart");

    // Generate README for Flutter usage
    const flutterReadme = generateFlutterReadme();
    await fs.writeFile("dist/flutter/README.md", flutterReadme);
    console.log("‚úÖ Generated Flutter README: dist/flutter/README.md");

    console.log("üéâ Flutter theme generation completed!");
  } catch (error) {
    console.error("‚ùå Flutter theme generation failed:", error);
    process.exit(1);
  }
}

function generateFlutterThemeData(tokens) {
  return `// Generated by mild-ui/core
// DO NOT EDIT - This file is auto-generated
import 'package:flutter/material.dart';

/// Mild UI Theme for Flutter
/// 
/// A comprehensive design system with colors, typography, and spacing
/// matching the mild-ui web design system.
class MildTheme {
  // Color Palette
  static const Map<int, Color> _primarySwatch = {
    50: Color(0xFFF0F9FF),   // ${tokens.colors.primary["50"]}
    100: Color(0xFFE0F2FE),  // ${tokens.colors.primary["100"]}
    200: Color(0xFFBAE6FD),  // ${tokens.colors.primary["200"]}
    300: Color(0xFF7DD3FC),  // ${tokens.colors.primary["300"]}
    400: Color(0xFF38BDF8),  // ${tokens.colors.primary["400"]}
    500: Color(0xFF0EA5E9),  // ${tokens.colors.primary["500"]}
    600: Color(0xFF0284C7),  // ${tokens.colors.primary["600"]}
    700: Color(0xFF0369A1),  // ${tokens.colors.primary["700"]}
    800: Color(0xFF075985),  // ${tokens.colors.primary["800"]}
    900: Color(0xFF0C4A6E),  // ${tokens.colors.primary["900"]}
  };

  static const Map<int, Color> _graySwatch = {
    50: Color(0xFFF9FAFB),   // ${tokens.colors.gray["50"]}
    100: Color(0xFFF3F4F6),  // ${tokens.colors.gray["100"]}
    200: Color(0xFFE5E7EB),  // ${tokens.colors.gray["200"]}
    300: Color(0xFFD1D5DB),  // ${tokens.colors.gray["300"]}
    400: Color(0xFF9CA3AF),  // ${tokens.colors.gray["400"]}
    500: Color(0xFF6B7280),  // ${tokens.colors.gray["500"]}
    600: Color(0xFF4B5563),  // ${tokens.colors.gray["600"]}
    700: Color(0xFF374151),  // ${tokens.colors.gray["700"]}
    800: Color(0xFF1F2937),  // ${tokens.colors.gray["800"]}
    900: Color(0xFF111827),  // ${tokens.colors.gray["900"]}
  };

  // Primary Colors
  static const MaterialColor primary = MaterialColor(0xFF0EA5E9, _primarySwatch);
  static const Color primaryLight = Color(0xFF38BDF8);
  static const Color primaryDark = Color(0xFF0369A1);

  // Gray Colors
  static const MaterialColor gray = MaterialColor(0xFF6B7280, _graySwatch);

  // Semantic Colors
  static const Color background = Color(0xFFF9FAFB);     // gray-50
  static const Color foreground = Color(0xFF111827);     // gray-900
  static const Color muted = Color(0xFFF3F4F6);          // gray-100
  static const Color mutedForeground = Color(0xFF6B7280); // gray-500
  static const Color border = Color(0xFFE5E7EB);         // gray-200

  // Dark Theme Colors
  static const Color backgroundDark = Color(0xFF0A0A0A);
  static const Color foregroundDark = Color(0xFFFAFAFA);
  static const Color mutedDark = Color(0xFF262626);
  static const Color mutedForegroundDark = Color(0xFFA3A3A3);
  static const Color borderDark = Color(0xFF262626);

  // Spacing (converted from rem to logical pixels, assuming 16px = 1rem)
  static const double spacing0 = 0.0;      // ${tokens.spacing["0"]}
  static const double spacing1 = 4.0;      // ${tokens.spacing["1"]} -> 0.25rem
  static const double spacing2 = 8.0;      // ${tokens.spacing["2"]} -> 0.5rem
  static const double spacing3 = 12.0;     // ${tokens.spacing["3"]} -> 0.75rem
  static const double spacing4 = 16.0;     // ${tokens.spacing["4"]} -> 1rem
  static const double spacing5 = 20.0;     // ${tokens.spacing["5"]} -> 1.25rem
  static const double spacing6 = 24.0;     // ${tokens.spacing["6"]} -> 1.5rem
  static const double spacing8 = 32.0;     // ${tokens.spacing["8"]} -> 2rem
  static const double spacing10 = 40.0;    // ${tokens.spacing["10"]} -> 2.5rem
  static const double spacing12 = 48.0;    // ${tokens.spacing["12"]} -> 3rem
  static const double spacing16 = 64.0;    // ${tokens.spacing["16"]} -> 4rem
  static const double spacing20 = 80.0;    // ${tokens.spacing["20"]} -> 5rem
  static const double spacing24 = 96.0;    // ${tokens.spacing["24"]} -> 6rem

  // Border Radius
  static const double radiusNone = 0.0;    // ${tokens.borderRadius.none}
  static const double radiusSm = 2.0;      // ${tokens.borderRadius.sm}
  static const double radiusBase = 4.0;    // ${tokens.borderRadius.base}
  static const double radiusMd = 6.0;      // ${tokens.borderRadius.md}
  static const double radiusLg = 8.0;      // ${tokens.borderRadius.lg}
  static const double radiusXl = 12.0;     // ${tokens.borderRadius.xl}
  static const double radius2xl = 16.0;    // ${tokens.borderRadius["2xl"]}
  static const double radiusFull = 999.0;  // ${tokens.borderRadius.full}

  // Font Sizes (converted from rem to logical pixels)
  static const double fontSizeXs = 12.0;   // ${tokens.fontSize.xs} -> 0.75rem
  static const double fontSizeSm = 14.0;   // ${tokens.fontSize.sm} -> 0.875rem
  static const double fontSizeBase = 16.0; // ${tokens.fontSize.base} -> 1rem
  static const double fontSizeLg = 18.0;   // ${tokens.fontSize.lg} -> 1.125rem
  static const double fontSizeXl = 20.0;   // ${tokens.fontSize.xl} -> 1.25rem
  static const double fontSize2xl = 24.0;  // ${tokens.fontSize["2xl"]} -> 1.5rem
  static const double fontSize3xl = 30.0;  // ${tokens.fontSize["3xl"]} -> 1.875rem
  static const double fontSize4xl = 36.0;  // ${tokens.fontSize["4xl"]} -> 2.25rem

  // Font Weights
  static const FontWeight fontWeightNormal = FontWeight.w400;   // ${tokens.fontWeight.normal}
  static const FontWeight fontWeightMedium = FontWeight.w500;   // ${tokens.fontWeight.medium}
  static const FontWeight fontWeightSemibold = FontWeight.w600; // ${tokens.fontWeight.semibold}
  static const FontWeight fontWeightBold = FontWeight.w700;     // ${tokens.fontWeight.bold}

  // Light Theme
  static ThemeData get lightTheme {
    return ThemeData(
      useMaterial3: true,
      brightness: Brightness.light,
      primarySwatch: primary,
      primaryColor: primary,
      scaffoldBackgroundColor: background,
      cardColor: Colors.white,
      dividerColor: border,
      
      // App Bar Theme
      appBarTheme: const AppBarTheme(
        backgroundColor: Colors.white,
        foregroundColor: foreground,
        elevation: 0,
        centerTitle: false,
      ),

      // Text Theme
      textTheme: const TextTheme(
        displayLarge: TextStyle(fontSize: fontSize4xl, fontWeight: fontWeightBold, color: foreground),
        displayMedium: TextStyle(fontSize: fontSize3xl, fontWeight: fontWeightBold, color: foreground),
        displaySmall: TextStyle(fontSize: fontSize2xl, fontWeight: fontWeightBold, color: foreground),
        headlineLarge: TextStyle(fontSize: fontSizeXl, fontWeight: fontWeightSemibold, color: foreground),
        headlineMedium: TextStyle(fontSize: fontSizeLg, fontWeight: fontWeightSemibold, color: foreground),
        headlineSmall: TextStyle(fontSize: fontSizeBase, fontWeight: fontWeightSemibold, color: foreground),
        bodyLarge: TextStyle(fontSize: fontSizeBase, fontWeight: fontWeightNormal, color: foreground),
        bodyMedium: TextStyle(fontSize: fontSizeSm, fontWeight: fontWeightNormal, color: foreground),
        bodySmall: TextStyle(fontSize: fontSizeXs, fontWeight: fontWeightNormal, color: mutedForeground),
      ),

      // Button Theme
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          backgroundColor: primary,
          foregroundColor: Colors.white,
          padding: const EdgeInsets.symmetric(horizontal: spacing4, vertical: spacing2),
          shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(radiusMd)),
        ),
      ),

      // Input Decoration Theme
      inputDecorationTheme: InputDecorationTheme(
        border: OutlineInputBorder(
          borderRadius: BorderRadius.circular(radiusMd),
          borderSide: const BorderSide(color: border),
        ),
        focusedBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(radiusMd),
          borderSide: const BorderSide(color: primary, width: 2),
        ),
        contentPadding: const EdgeInsets.symmetric(horizontal: spacing3, vertical: spacing2),
      ),

      // Card Theme
      cardTheme: CardTheme(
        elevation: 2,
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(radiusLg)),
        margin: const EdgeInsets.all(spacing2),
      ),
    );
  }

  // Dark Theme
  static ThemeData get darkTheme {
    return ThemeData(
      useMaterial3: true,
      brightness: Brightness.dark,
      primarySwatch: primary,
      primaryColor: primary,
      scaffoldBackgroundColor: backgroundDark,
      cardColor: mutedDark,
      dividerColor: borderDark,
      
      // App Bar Theme
      appBarTheme: const AppBarTheme(
        backgroundColor: backgroundDark,
        foregroundColor: foregroundDark,
        elevation: 0,
        centerTitle: false,
      ),

      // Text Theme
      textTheme: const TextTheme(
        displayLarge: TextStyle(fontSize: fontSize4xl, fontWeight: fontWeightBold, color: foregroundDark),
        displayMedium: TextStyle(fontSize: fontSize3xl, fontWeight: fontWeightBold, color: foregroundDark),
        displaySmall: TextStyle(fontSize: fontSize2xl, fontWeight: fontWeightBold, color: foregroundDark),
        headlineLarge: TextStyle(fontSize: fontSizeXl, fontWeight: fontWeightSemibold, color: foregroundDark),
        headlineMedium: TextStyle(fontSize: fontSizeLg, fontWeight: fontWeightSemibold, color: foregroundDark),
        headlineSmall: TextStyle(fontSize: fontSizeBase, fontWeight: fontWeightSemibold, color: foregroundDark),
        bodyLarge: TextStyle(fontSize: fontSizeBase, fontWeight: fontWeightNormal, color: foregroundDark),
        bodyMedium: TextStyle(fontSize: fontSizeSm, fontWeight: fontWeightNormal, color: foregroundDark),
        bodySmall: TextStyle(fontSize: fontSizeXs, fontWeight: fontWeightNormal, color: mutedForegroundDark),
      ),

      // Button Theme
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          backgroundColor: primary,
          foregroundColor: Colors.white,
          padding: const EdgeInsets.symmetric(horizontal: spacing4, vertical: spacing2),
          shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(radiusMd)),
        ),
      ),

      // Input Decoration Theme
      inputDecorationTheme: InputDecorationTheme(
        border: OutlineInputBorder(
          borderRadius: BorderRadius.circular(radiusMd),
          borderSide: const BorderSide(color: borderDark),
        ),
        focusedBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(radiusMd),
          borderSide: const BorderSide(color: primary, width: 2),
        ),
        contentPadding: const EdgeInsets.symmetric(horizontal: spacing3, vertical: spacing2),
      ),

      // Card Theme
      cardTheme: CardTheme(
        elevation: 2,
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(radiusLg)),
        margin: const EdgeInsets.all(spacing2),
        color: mutedDark,
      ),
    );
  }
}
`;
}

function generateFlutterUtilities(tokens) {
  return `// Generated by mild-ui/core
// DO NOT EDIT - This file is auto-generated
import 'package:flutter/material.dart';
import 'mild_theme.dart';

/// Mild UI Utility Extensions for Flutter
/// 
/// Provides Tailwind-like utility methods for Flutter widgets
/// matching the mild-ui web utility classes.

/// Spacing utilities extension
extension MildSpacing on Widget {
  // Padding utilities (equivalent to mild-p-*)
  Widget p0() => Padding(padding: EdgeInsets.all(MildTheme.spacing0), child: this);
  Widget p1() => Padding(padding: EdgeInsets.all(MildTheme.spacing1), child: this);
  Widget p2() => Padding(padding: EdgeInsets.all(MildTheme.spacing2), child: this);
  Widget p3() => Padding(padding: EdgeInsets.all(MildTheme.spacing3), child: this);
  Widget p4() => Padding(padding: EdgeInsets.all(MildTheme.spacing4), child: this);
  Widget p5() => Padding(padding: EdgeInsets.all(MildTheme.spacing5), child: this);
  Widget p6() => Padding(padding: EdgeInsets.all(MildTheme.spacing6), child: this);
  Widget p8() => Padding(padding: EdgeInsets.all(MildTheme.spacing8), child: this);

  // Horizontal padding (equivalent to mild-px-*)
  Widget px1() => Padding(padding: EdgeInsets.symmetric(horizontal: MildTheme.spacing1), child: this);
  Widget px2() => Padding(padding: EdgeInsets.symmetric(horizontal: MildTheme.spacing2), child: this);
  Widget px3() => Padding(padding: EdgeInsets.symmetric(horizontal: MildTheme.spacing3), child: this);
  Widget px4() => Padding(padding: EdgeInsets.symmetric(horizontal: MildTheme.spacing4), child: this);
  Widget px6() => Padding(padding: EdgeInsets.symmetric(horizontal: MildTheme.spacing6), child: this);

  // Vertical padding (equivalent to mild-py-*)
  Widget py1() => Padding(padding: EdgeInsets.symmetric(vertical: MildTheme.spacing1), child: this);
  Widget py2() => Padding(padding: EdgeInsets.symmetric(vertical: MildTheme.spacing2), child: this);
  Widget py3() => Padding(padding: EdgeInsets.symmetric(vertical: MildTheme.spacing3), child: this);
  Widget py4() => Padding(padding: EdgeInsets.symmetric(vertical: MildTheme.spacing4), child: this);
  Widget py6() => Padding(padding: EdgeInsets.symmetric(vertical: MildTheme.spacing6), child: this);

  // Margin utilities (equivalent to mild-m-*)
  Widget m1() => Container(margin: EdgeInsets.all(MildTheme.spacing1), child: this);
  Widget m2() => Container(margin: EdgeInsets.all(MildTheme.spacing2), child: this);
  Widget m3() => Container(margin: EdgeInsets.all(MildTheme.spacing3), child: this);
  Widget m4() => Container(margin: EdgeInsets.all(MildTheme.spacing4), child: this);
  Widget m6() => Container(margin: EdgeInsets.all(MildTheme.spacing6), child: this);
}

/// Layout utilities extension
extension MildLayout on Widget {
  // Flex utilities (equivalent to mild-flex)
  Widget flex({int flex = 1}) => Flexible(flex: flex, child: this);
  Widget expanded() => Expanded(child: this);

  // Center utilities (equivalent to mild-items-center, mild-justify-center)
  Widget center() => Center(child: this);
  
  // Container with background color (equivalent to mild-bg-*)
  Widget bgPrimary() => Container(color: MildTheme.primary, child: this);
  Widget bgGray100() => Container(color: MildTheme.gray[100], child: this);
  Widget bgGray200() => Container(color: MildTheme.gray[200], child: this);
  Widget bgWhite() => Container(color: Colors.white, child: this);
  
  // Border radius utilities (equivalent to mild-radius-*)
  Widget roundedSm() => ClipRRect(borderRadius: BorderRadius.circular(MildTheme.radiusSm), child: this);
  Widget rounded() => ClipRRect(borderRadius: BorderRadius.circular(MildTheme.radiusBase), child: this);
  Widget roundedMd() => ClipRRect(borderRadius: BorderRadius.circular(MildTheme.radiusMd), child: this);
  Widget roundedLg() => ClipRRect(borderRadius: BorderRadius.circular(MildTheme.radiusLg), child: this);
  Widget roundedFull() => ClipRRect(borderRadius: BorderRadius.circular(MildTheme.radiusFull), child: this);

  // Shadow utilities (equivalent to mild-shadow-*)
  Widget shadow() => Container(
    decoration: BoxDecoration(
      boxShadow: [
        BoxShadow(
          color: Colors.black.withOpacity(0.1),
          blurRadius: 4,
          offset: const Offset(0, 2),
        ),
      ],
    ),
    child: this,
  );

  Widget shadowLg() => Container(
    decoration: BoxDecoration(
      boxShadow: [
        BoxShadow(
          color: Colors.black.withOpacity(0.1),
          blurRadius: 15,
          offset: const Offset(0, 4),
        ),
      ],
    ),
    child: this,
  );
}

/// Typography utilities for Text widgets
extension MildTypography on Text {
  // Font size utilities (equivalent to mild-text-*)
  Text textXs() => Text(data!, style: style?.copyWith(fontSize: MildTheme.fontSizeXs) ?? TextStyle(fontSize: MildTheme.fontSizeXs));
  Text textSm() => Text(data!, style: style?.copyWith(fontSize: MildTheme.fontSizeSm) ?? TextStyle(fontSize: MildTheme.fontSizeSm));
  Text textBase() => Text(data!, style: style?.copyWith(fontSize: MildTheme.fontSizeBase) ?? TextStyle(fontSize: MildTheme.fontSizeBase));
  Text textLg() => Text(data!, style: style?.copyWith(fontSize: MildTheme.fontSizeLg) ?? TextStyle(fontSize: MildTheme.fontSizeLg));
  Text textXl() => Text(data!, style: style?.copyWith(fontSize: MildTheme.fontSizeXl) ?? TextStyle(fontSize: MildTheme.fontSizeXl));

  // Font weight utilities (equivalent to mild-font-*)
  Text fontNormal() => Text(data!, style: style?.copyWith(fontWeight: MildTheme.fontWeightNormal) ?? TextStyle(fontWeight: MildTheme.fontWeightNormal));
  Text fontMedium() => Text(data!, style: style?.copyWith(fontWeight: MildTheme.fontWeightMedium) ?? TextStyle(fontWeight: MildTheme.fontWeightMedium));
  Text fontSemibold() => Text(data!, style: style?.copyWith(fontWeight: MildTheme.fontWeightSemibold) ?? TextStyle(fontWeight: MildTheme.fontWeightSemibold));
  Text fontBold() => Text(data!, style: style?.copyWith(fontWeight: MildTheme.fontWeightBold) ?? TextStyle(fontWeight: MildTheme.fontWeightBold));

  // Text color utilities (equivalent to mild-text-*)
  Text textPrimary() => Text(data!, style: style?.copyWith(color: MildTheme.primary) ?? TextStyle(color: MildTheme.primary));
  Text textGray600() => Text(data!, style: style?.copyWith(color: MildTheme.gray[600]) ?? TextStyle(color: MildTheme.gray[600]));
  Text textGray900() => Text(data!, style: style?.copyWith(color: MildTheme.gray[900]) ?? TextStyle(color: MildTheme.gray[900]));
  Text textWhite() => Text(data!, style: style?.copyWith(color: Colors.white) ?? TextStyle(color: Colors.white));
}

/// Pre-built component utilities
class MildUI {
  // Button variants (equivalent to mild-ui button classes)
  static Widget primaryButton({
    required String text,
    required VoidCallback onPressed,
    bool loading = false,
  }) {
    return ElevatedButton(
      onPressed: loading ? null : onPressed,
      style: ElevatedButton.styleFrom(
        backgroundColor: MildTheme.primary,
        foregroundColor: Colors.white,
        padding: const EdgeInsets.symmetric(
          horizontal: MildTheme.spacing4,
          vertical: MildTheme.spacing3,
        ),
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(MildTheme.radiusMd),
        ),
      ),
      child: loading
          ? const SizedBox(
              width: 16,
              height: 16,
              child: CircularProgressIndicator(color: Colors.white, strokeWidth: 2),
            )
          : Text(text),
    );
  }

  // Card component (equivalent to mild-ui card)
  static Widget card({
    required Widget child,
    EdgeInsets? padding,
    EdgeInsets? margin,
  }) {
    return Container(
      margin: margin ?? const EdgeInsets.all(MildTheme.spacing2),
      padding: padding ?? const EdgeInsets.all(MildTheme.spacing4),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(MildTheme.radiusLg),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.1),
            blurRadius: 4,
            offset: const Offset(0, 2),
          ),
        ],
      ),
      child: child,
    );
  }

  // Input field (equivalent to mild-ui input)
  static Widget input({
    required String label,
    String? placeholder,
    TextEditingController? controller,
    ValueChanged<String>? onChanged,
  }) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(label).fontMedium().textSm(),
        const SizedBox(height: MildTheme.spacing1),
        TextField(
          controller: controller,
          onChanged: onChanged,
          decoration: InputDecoration(
            hintText: placeholder,
            border: OutlineInputBorder(
              borderRadius: BorderRadius.circular(MildTheme.radiusMd),
              borderSide: BorderSide(color: MildTheme.gray[200]!),
            ),
            focusedBorder: OutlineInputBorder(
              borderRadius: BorderRadius.circular(MildTheme.radiusMd),
              borderSide: const BorderSide(color: MildTheme.primary, width: 2),
            ),
            contentPadding: const EdgeInsets.symmetric(
              horizontal: MildTheme.spacing3,
              vertical: MildTheme.spacing2,
            ),
          ),
        ),
      ],
    );
  }
}

/// Layout helpers for common patterns
class MildLayout {
  // Flex row (equivalent to mild-flex mild-items-center)
  static Widget row({
    required List<Widget> children,
    MainAxisAlignment mainAxisAlignment = MainAxisAlignment.start,
    CrossAxisAlignment crossAxisAlignment = CrossAxisAlignment.center,
    double? gap,
  }) {
    if (gap != null) {
      final List<Widget> spacedChildren = [];
      for (int i = 0; i < children.length; i++) {
        spacedChildren.add(children[i]);
        if (i < children.length - 1) {
          spacedChildren.add(SizedBox(width: gap));
        }
      }
      return Row(
        mainAxisAlignment: mainAxisAlignment,
        crossAxisAlignment: crossAxisAlignment,
        children: spacedChildren,
      );
    }
    
    return Row(
      mainAxisAlignment: mainAxisAlignment,
      crossAxisAlignment: crossAxisAlignment,
      children: children,
    );
  }

  // Flex column (equivalent to mild-flex mild-flex-col)
  static Widget column({
    required List<Widget> children,
    MainAxisAlignment mainAxisAlignment = MainAxisAlignment.start,
    CrossAxisAlignment crossAxisAlignment = CrossAxisAlignment.start,
    double? gap,
  }) {
    if (gap != null) {
      final List<Widget> spacedChildren = [];
      for (int i = 0; i < children.length; i++) {
        spacedChildren.add(children[i]);
        if (i < children.length - 1) {
          spacedChildren.add(SizedBox(height: gap));
        }
      }
      return Column(
        mainAxisAlignment: mainAxisAlignment,
        crossAxisAlignment: crossAxisAlignment,
        children: spacedChildren,
      );
    }
    
    return Column(
      mainAxisAlignment: mainAxisAlignment,
      crossAxisAlignment: crossAxisAlignment,
      children: children,
    );
  }
}
`;
}

function generateFlutterReadme() {
  return `# mild-ui Flutter Theme

Convert your mild-ui design system to Flutter with identical design tokens, colors, typography, and spacing.

## Installation

1. Copy the generated Dart files to your Flutter project:
   \`\`\`
   lib/
     themes/
       mild_theme.dart
       mild_utilities.dart
   \`\`\`

2. Import the theme in your main app:
   \`\`\`dart
   import 'themes/mild_theme.dart';
   import 'themes/mild_utilities.dart';
   \`\`\`

## Usage

### Basic Theme Setup

\`\`\`dart
import 'package:flutter/material.dart';
import 'themes/mild_theme.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Mild UI App',
      theme: MildTheme.lightTheme,
      darkTheme: MildTheme.darkTheme,
      home: MyHomePage(),
    );
  }
}
\`\`\`

### Using Utility Extensions

\`\`\`dart
import 'themes/mild_utilities.dart';

class MyWidget extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Column(
      children: [
        // Equivalent to: <div class="mild-p-4 mild-bg-white mild-radius-lg mild-shadow">
        Text('Hello World')
          .p4()
          .bgWhite()
          .roundedLg()
          .shadow(),
          
        // Equivalent to: <h1 class="mild-text-xl mild-font-bold mild-text-gray-900">
        Text('Title')
          .textXl()
          .fontBold()
          .textGray900(),
          
        // Equivalent to: <div class="mild-flex mild-items-center mild-gap-4">
        MildLayout.row(
          gap: MildTheme.spacing4,
          children: [
            Text('Item 1'),
            Text('Item 2'),
          ],
        ),
      ],
    );
  }
}
\`\`\`

### Using Pre-built Components

\`\`\`dart
// Primary button (equivalent to mild-ui button)
MildUI.primaryButton(
  text: 'Click me',
  onPressed: () => print('Clicked!'),
  loading: false,
)

// Card component (equivalent to mild-ui card)
MildUI.card(
  child: Column(
    children: [
      Text('Card Title').textLg().fontSemibold(),
      Text('Card content').textSm().textGray600(),
    ],
  ),
)

// Input field (equivalent to mild-ui input)
MildUI.input(
  label: 'Email',
  placeholder: 'Enter your email',
  onChanged: (value) => print('Email: \$value'),
)
\`\`\`

### Direct Theme Access

\`\`\`dart
// Access colors
Container(
  color: MildTheme.primary,
  child: Text(
    'Primary colored container',
    style: TextStyle(color: MildTheme.foreground),
  ),
)

// Access spacing
Padding(
  padding: EdgeInsets.all(MildTheme.spacing4),
  child: Text('Padded text'),
)

// Access typography
Text(
  'Large bold text',
  style: TextStyle(
    fontSize: MildTheme.fontSizeXl,
    fontWeight: MildTheme.fontWeightBold,
  ),
)
\`\`\`

## Design Token Mapping

| Web CSS | Flutter |
|---------|---------|
| \`mild-p-4\` | \`.p4()\` |
| \`mild-text-xl\` | \`.textXl()\` |
| \`mild-font-bold\` | \`.fontBold()\` |
| \`mild-bg-primary-500\` | \`.bgPrimary()\` |
| \`mild-radius-md\` | \`.roundedMd()\` |
| \`mild-shadow-lg\` | \`.shadowLg()\` |
| \`mild-flex mild-items-center\` | \`MildLayout.row()\` |

## Dark Mode Support

The theme automatically adapts to system dark mode preference, or you can set it manually:

\`\`\`dart
MaterialApp(
  theme: MildTheme.lightTheme,
  darkTheme: MildTheme.darkTheme,
  themeMode: ThemeMode.system, // Follows system preference
  // themeMode: ThemeMode.dark,  // Force dark mode
  // themeMode: ThemeMode.light, // Force light mode
)
\`\`\`

## Customization

Extend the theme with your own colors and utilities:

\`\`\`dart
class MyCustomTheme extends MildTheme {
  static const Color customPrimary = Color(0xFF6366F1);
  
  static ThemeData get customLightTheme {
    return lightTheme.copyWith(
      primaryColor: customPrimary,
    );
  }
}
\`\`\`

This Flutter theme maintains 100% design consistency with your mild-ui web application!
`;
}

module.exports = { generateFlutterTheme };

if (require.main === module) {
  generateFlutterTheme();
}