// Design System Typography
// @description Core typography tokens for SASS compilation

// Font size scale (matching TypeScript tokens)
$mild-font-sizes: (
  'xs': 0.75rem,    // 12px
  'sm': 0.875rem,   // 14px
  'base': 1rem,     // 16px
  'lg': 1.125rem,   // 18px
  'xl': 1.25rem,    // 20px
  '2xl': 1.5rem,    // 24px
  '3xl': 1.875rem,  // 30px
  '4xl': 2.25rem,   // 36px
  '5xl': 3rem,      // 48px
  '6xl': 3.75rem,   // 60px
  '7xl': 4.5rem,    // 72px
  '8xl': 6rem,      // 96px
  '9xl': 8rem       // 128px
) !default;

// Font weight scale (matching TypeScript tokens)
$mild-font-weights: (
  'thin': 100,
  'extralight': 200,
  'light': 300,
  'normal': 400,
  'medium': 500,
  'semibold': 600,
  'bold': 700,
  'extrabold': 800,
  'black': 900
) !default;

// Font family stacks (matching TypeScript tokens)
$mild-font-families: (
  'sans': (
    'ui-sans-serif',
    'system-ui',
    '-apple-system',
    'BlinkMacSystemFont',
    '"Segoe UI"',
    'Roboto',
    '"Helvetica Neue"',
    'Arial',
    '"Noto Sans"',
    'sans-serif',
    '"Apple Color Emoji"',
    '"Segoe UI Emoji"',
    '"Segoe UI Symbol"',
    '"Noto Color Emoji"'
  ),
  'serif': (
    'ui-serif',
    'Georgia',
    'Cambria',
    '"Times New Roman"',
    'Times',
    'serif'
  ),
  'mono': (
    'ui-monospace',
    'SFMono-Regular',
    '"SF Mono"',
    'Consolas',
    '"Liberation Mono"',
    'Menlo',
    'monospace'
  )
) !default;

// Line height scale (matching TypeScript tokens)
$mild-line-heights: (
  'none': 1,
  'tight': 1.25,
  'snug': 1.375,
  'normal': 1.5,
  'relaxed': 1.625,
  'loose': 2
) !default;

// Letter spacing scale (matching TypeScript tokens)
$mild-letter-spacing: (
  'tighter': -0.05em,
  'tight': -0.025em,
  'normal': 0em,
  'wide': 0.025em,
  'wider': 0.05em,
  'widest': 0.1em
) !default;

// Typography utility functions
@function font-size($size) {
  @if map-has-key($mild-font-sizes, $size) {
    @return map-get($mild-font-sizes, $size);
  }
  
  @warn "Font size `#{$size}` not found in design system";
  @return null;
}

@function font-weight($weight) {
  @if map-has-key($mild-font-weights, $weight) {
    @return map-get($mild-font-weights, $weight);
  }
  
  @warn "Font weight `#{$weight}` not found in design system";
  @return null;
}

@function font-family($family) {
  @if map-has-key($mild-font-families, $family) {
    $font-stack: map-get($mild-font-families, $family);
    @return list-to-string($font-stack, ', ');
  }
  
  @warn "Font family `#{$family}` not found in design system";
  @return null;
}

@function line-height($height) {
  @if map-has-key($mild-line-heights, $height) {
    @return map-get($mild-line-heights, $height);
  }
  
  @warn "Line height `#{$height}` not found in design system";
  @return null;
}

@function letter-spacing($spacing) {
  @if map-has-key($mild-letter-spacing, $spacing) {
    @return map-get($mild-letter-spacing, $spacing);
  }
  
  @warn "Letter spacing `#{$spacing}` not found in design system";
  @return null;
}

// Generate CSS custom properties for typography
@mixin generate-typography-custom-properties() {
  // Font sizes
  @each $token, $value in $mild-font-sizes {
    --mild-font-size-#{$token}: #{$value};
  }
  
  // Font weights
  @each $token, $value in $mild-font-weights {
    --mild-font-weight-#{$token}: #{$value};
  }
  
  // Font families
  @each $token, $value in $mild-font-families {
    --mild-font-family-#{$token}: #{list-to-string($value, ', ')};
  }
  
  // Line heights
  @each $token, $value in $mild-line-heights {
    --mild-line-height-#{$token}: #{$value};
  }
  
  // Letter spacing
  @each $token, $value in $mild-letter-spacing {
    --mild-letter-spacing-#{$token}: #{$value};
  }
}

// Helper function to convert list to string
@function list-to-string($list, $separator: ', ') {
  $result: '';
  @for $i from 1 through length($list) {
    $result: $result + nth($list, $i);
    @if $i < length($list) {
      $result: $result + $separator;
    }
  }
  @return $result;
}